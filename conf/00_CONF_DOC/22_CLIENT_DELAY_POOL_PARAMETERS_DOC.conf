# CLIENT DELAY POOL PARAMETERS
# -----------------------------------------------------------------------------

#  TAG: client_delay_pools
#	This option specifies the number of client delay pools used. It must
#	preceed other client_delay_* options.
#
#	Example:
#		client_delay_pools 2
#
#	See also client_delay_parameters and client_delay_access.
#Default:
# client_delay_pools 0

#  TAG: client_delay_initial_bucket_level	(percent, 0-no_limit)
#	This option determines the initial bucket size as a percentage of
#	max_bucket_size from client_delay_parameters. Buckets are created
#	at the time of the "first" connection from the matching IP. Idle
#	buckets are periodically deleted up.
#
#	You can specify more than 100 percent but note that such "oversized"
#	buckets are not refilled until their size goes down to max_bucket_size
#	from client_delay_parameters.
#
#	Example:
#		client_delay_initial_bucket_level 50
#Default:
# client_delay_initial_bucket_level 50

#  TAG: client_delay_parameters
#
#	This option configures client-side bandwidth limits using the
#	following format:
#
#	    client_delay_parameters pool speed_limit max_bucket_size
#
#	pool is an integer ID used for client_delay_access matching.
#
#	speed_limit is bytes added to the bucket per second.
#
#	max_bucket_size is the maximum size of a bucket, enforced after any
#	speed_limit additions.
#
#	Please see the delay_parameters option for more information and
#	examples.
#
#	Example:
#		client_delay_parameters 1 1024 2048
#		client_delay_parameters 2 51200 16384
#
#	See also client_delay_access.
#
#Default:
# none

#  TAG: client_delay_access
#	This option determines the client-side delay pool for the
#	request:
#
#	    client_delay_access pool_ID allow|deny acl_name
#
#	All client_delay_access options are checked in their pool ID
#	order, starting with pool 1. The first checked pool with allowed
#	request is selected for the request. If no ACL matches or there
#	are no client_delay_access options, the request bandwidth is not
#	limited.
#
#	The ACL-selected pool is then used to find the
#	client_delay_parameters for the request. Client-side pools are
#	not used to aggregate clients. Clients are always aggregated
#	based on their source IP addresses (one bucket per source IP).
#
#	This clause only supports fast acl types.
#	See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
#	Additionally, only the client TCP connection details are available.
#	ACLs testing HTTP properties will not work.
#
#	Please see delay_access for more examples.
#
#	Example:
#		client_delay_access 1 allow low_rate_network
#		client_delay_access 2 allow vips_network
#
#
#	See also client_delay_parameters and client_delay_pools.
#Default:
# Deny use of the pool, unless allow rules exist in squid.conf for the pool.

